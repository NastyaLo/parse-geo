{"version":3,"sources":["parse-geo/process.js","parse-geo/index.js","App.js","index.js"],"names":["data","a","parseXML","jsonData","coordsMeta","gpx","wpt","resultObj","forEach","$","lat","lon","ele","name","time","push","join","toCSV","message","process","ParseGeoUI","useState","fileName","setFileName","processData","useCallback","elem","document","getElementById","value","converted","blob","Blob","type","link","createElement","href","window","URL","createObjectURL","download","click","htmlFor","onChange","e","target","id","onClick","App","className","ReactDOM","render","StrictMode"],"mappings":"wTAGA,WAAwBA,GAAxB,mBAAAC,EAAA,+EAE2BC,6BAASF,GAFpC,cAEUG,EAFV,OAIUC,EAAaD,EAASE,IAAIC,IAC1BC,EAAY,GAElBH,EAAWI,SAAQ,YAA2C,IAAD,IAAvCC,EAAKC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,IAAOC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC9CP,EAAUQ,KAAK,CAAEL,MAAKC,MAAKC,IAAKA,EAAII,KAAK,KAAMH,KAAMA,EAAKG,KAAK,KAAMF,KAAMA,EAAKE,KAAK,UAR7F,kBAWWC,gBAAMV,IAXjB,mNAa6C,KAAEW,QAb/C,2J,sBAiBeC,M,mDCgBAC,MAjCf,WACI,MAAgCC,mBAAS,YAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAcC,sBAAW,sBAAC,kCAAAxB,EAAA,6DACtByB,EAAOC,SAASC,eAAe,QADT,SAEJT,EAAQO,EAAKG,OAFT,OAEtBC,EAFsB,OAItBC,EAAO,IAAIC,KAAK,CAACF,GAAY,CAACG,KAAM,cACpCC,EAAOP,SAASQ,cAAc,MAE/BC,KAAOC,OAAOC,IAAIC,gBAAgBR,GACvCG,EAAKM,SAAL,UAAmBlB,EAAnB,QACAY,EAAKO,QATuB,2CAU7B,CAACnB,IAEJ,OAAO,gCACH,wBAAOoB,QAAQ,WAAf,2OAC8C,uBAC1C,uBAAOb,MAAOP,EAAUqB,SAAU,SAACC,GAAQrB,EAAYqB,EAAEC,OAAOhB,aAEpE,uBACA,uBACA,wBAAOa,QAAQ,OAAf,UACI,wNAAgD,uBAChD,0BAAUI,GAAG,YAEjB,uBACA,uBACA,uBACA,wBAAQC,QAAS,WAAQvB,KAAzB,mJCnBOwB,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,uBACA,+BACE,cAAC,EAAD,UCFRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,W","file":"static/js/main.6dedaa57.chunk.js","sourcesContent":["import { parseStringPromise as parseXML } from 'xml2js';\nimport { parse as toCSV } from 'json2csv';\n\nasync function process (data) {\n   try {\n    const jsonData = await parseXML(data);\n\n    const coordsMeta = jsonData.gpx.wpt;\n    const resultObj = [];\n\n    coordsMeta.forEach(({ $: { lat, lon }, ele, name, time }) => {\n        resultObj.push({ lat, lon, ele: ele.join('|'), name: name.join('|'), time: time.join('|') })\n    });\n\n    return toCSV(resultObj);\n   } catch (e) {\n        return `Произошла вот такая ошибка ${e.message}. Отправь ее Насте :)`;\n   }\n}\n\nexport default process;","import { useCallback, useState } from \"react\";\nimport process from './process';\n\nfunction ParseGeoUI () {\n    const [fileName, setFileName] = useState('geo-data');\n\n    const processData = useCallback(async () => {\n        const elem = document.getElementById('data');\n        const converted = await process(elem.value);\n\n        const blob = new Blob([converted], {type: 'text/csv'});\n        const link = document.createElement('a');\n\n        link.href = window.URL.createObjectURL(blob);\n        link.download = `${fileName}.csv`;\n        link.click();\n    }, [fileName]);\n\n    return <div>\n        <label htmlFor=\"filename\">\n            имя файла желаемое (применяется автоматом)<br/>\n            <input value={fileName} onChange={(e) => { setFileName(e.target.value); }}/>\n        </label>\n        <br/>\n        <br/>\n        <label htmlFor=\"data\">\n            <span>Вставь в поле данные и нажми кнопку</span><br/>\n            <textarea id=\"data\"></textarea>\n        </label>\n        <br/>\n        <br/>\n        <br/>\n        <button onClick={() => { processData() }}>Тык чтобы скачать резалт</button>        \n    </div>\n}\n\nexport default ParseGeoUI;","import ParseGeoUI from './parse-geo';\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Parse geo</header>\n      <main>\n        <ParseGeoUI/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}